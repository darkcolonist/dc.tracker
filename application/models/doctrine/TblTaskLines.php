<?php

/**
 * TblTaskLines
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class TblTaskLines extends BaseTblTaskLines
{
  static $PRIORITY_URGENT   = "urge";
  static $PRIORITY_CRITICAL = "crit";
  static $PRIORITY_HIGH     = "high";
  static $PRIORITY_NORMAL   = "norm";
  
  static $STATUS_HOLD       = "hold";
  static $STATUS_INFO       = "info";
  static $STATUS_PENDING    = "pend";
  static $STATUS_SOON       = "soon";
  
  public function get_one_by_hash($hash){
    $query = Doctrine_Query::create()
      ->from("TblTaskLines t")
      ->where("t.hash_key = ?", $hash)
      ->limit(1);

    $results = $query->execute();

    if($results->count())
      return $results->getFirst();
    else
      return null;
  }

  /**
   *
   * latest tasks only. queue or other types not included.
   *
   * @param array $params
   * @return Doctrine_Collection
   */
  public function get_latest($params = array()){
    $curdate = date("Y-m-d");

    $limit = kohana::config("application.day_limit"); // in number of days
    $limit_completion = $limit; // still show after n days of completion (for carry-over tasks)

    if(isset($params["display"]) && $params["display"] == "all")
      $limit = 365; // a year before and a year after

    $query = Doctrine_Query::create()
      ->select("t.*"
              . ", DATE_FORMAT(t.date_created, '%Y-%m-%d %H:%i') as day"
              . ", DATE_FORMAT(IF(t.is_pinned = 1, '{$curdate}', t.date_created), '%Y-%m-%d') as day_simple")
      ->from("TblTaskLines t")
      ->where(
          "(t.date_created > DATE_SUB(\"{$curdate}\", INTERVAL {$limit} day)"
          ." AND t.date_created < DATE_ADD(\"{$curdate}\", INTERVAL {$limit} day))"
          ." OR (t.date_completed > DATE_SUB(\"{$curdate}\", INTERVAL {$limit_completion} day)"
          ." AND t.date_completed < DATE_ADD(\"{$curdate}\", INTERVAL {$limit_completion} day))"
        )
//      ->andWhere("t.type = 'task'")
      ->orWhere("t.is_pinned")
//      ->orWhere("t.status <> 'done'")
      ->orderBy("group_name, description");

    if(isset($params["show"]) && $params["show"] != null)
      $query->andWhere("t.status = ?", $params["show"]);

    if(isset($params["search"]) && $params["search"] != null)
      $query->andWhere("t.group_name LIKE :search OR t.description LIKE :search",
              array("search" => "%".$params["search"]."%"));
    
    $results = $query->execute();

    return $results;
  }

  /**
   *
   * fetch tasks only.
   *
   * @param string $date
   * @param string $curdate
   * @return Doctrine_Collection
   */
  public function get_by_date($date, $curdate = null){
    $limit = kohana::config("application.day_limit");

    if($curdate == null)
      $curdate = date("Y-m-d");

    $query = Doctrine_Query::create()
      ->select("t.*, DATE_FORMAT(t.date_created, '%Y-%m-%d %H:%i') as day")
      ->from("TblTaskLines t")
      ->where("DATE_FORMAT(t.date_created, '%Y-%m-%d') = ?", $date)
      // ->andWhere("t.type = ?", "task")
      ->orderBy("group_name, description");

    if($date == $curdate){
      $query
        ->orWhere(
          "(t.date_created > DATE_SUB(\"{$date}\", INTERVAL {$limit} day)"
          ." AND t.date_created < DATE_ADD(\"{$date}\", INTERVAL {$limit} day)"
          ." AND (t.date_completed >= \"{$date}\" OR t.date_completed IS NULL))"
          // ." AND t.type = 'task'"
          ." OR t.is_pinned");
    }


    $results = $query->execute();

    return $results;
  }

  public function save(Doctrine_Connection $conn = null) {
    if($this->date_created == null)
      $this->date_created = date("Y-m-d H:i:s");
    else
      $this->date_modified = date("Y-m-d H:i:s");

    if($this->status == "done" && $this->date_completed == null)
      $this->date_completed = date("Y-m-d H:i:s");
    else if($this->status != "done")
      $this->date_completed = null;

    parent::save($conn);
  }

  public function suggest_query($keyword){
    $con = Doctrine_Manager::connection();
    $keyword = mysql_escape_string($keyword);
    $limit = kohana::config("application.suggest_limit");

    $statement =
     "SELECT *
      FROM (
        SELECT 
          DISTINCT(group_name) AS `value`,
          'project' AS `type`
        FROM tbl_task_lines
        WHERE NOT group_name IS NULL
          AND REPLACE(group_name, ' ', '_') LIKE '{$keyword}%'
        UNION SELECT
          hash_key,
          'hash'
        FROM tbl_task_lines
        WHERE hash_key LIKE '{$keyword}%'
        UNION SELECT
          value,
          type
        FROM tbl_suggestions
        WHERE value LIKE '{$keyword}%'
      ) AS rs1
      ORDER BY 1
      LIMIT {$limit};";

    $result = $con->execute($statement)->fetchAll();

    return $result;
  }
  
  protected function default_order_string($task_line_table_alias = null){
    $field = $task_line_table_alias == null 
      ? "status"
      : $task_line_table_alias.".status";
    
    $order_string = 'FIELD('.$field
            .',"'.TblTaskLines::$PRIORITY_URGENT.'"'
            .',"'.TblTaskLines::$PRIORITY_CRITICAL.'"'
            .',"'.TblTaskLines::$PRIORITY_HIGH.'"'
            .',"'.TblTaskLines::$PRIORITY_NORMAL.'"'
            .',"'.TblTaskLines::$STATUS_PENDING.'"'
            .',"'.TblTaskLines::$STATUS_HOLD.'"'
            .',"'.TblTaskLines::$STATUS_INFO.'"'
            .',"'.TblTaskLines::$STATUS_SOON.'"'
            .')';
    
    return $order_string;
  }
  
  /**
   * fetch the latest tasks
   * 
   * priority
   * urge - level 4 (highest)
   * crit - level 3
   * high - level 2
   * norm - level 1 (normal)
   * 
   * @param array $options
   * @return Doctrine_Collection
   */
  public function terminal_list($commands){
    $query = Doctrine_Query::create()
            ->from('TblTaskLines');
  
    if(isset($commands['-h']))
      $query->andWhere('hash_key LIKE ?','%'.$commands['-h'].'%');
  
    if(isset($commands['-g']))
      $query->andWhere('group_name LIKE ?','%'.$commands['-g'].'%');
            
    if(isset($commands['-q']))
      $query->andWhere('description LIKE ?','%'.$commands['-q'].'%');
            
    if(isset($commands['-s'])){
      $granulated_command = rtrim($commands['-s']);
      $granulated_command = '"'.$granulated_command.'"';
      $granulated_command = str_replace(',','","',$granulated_command);
      $query->andWhere('status in ('.$granulated_command.')');
    }
    else
      $query->andWhere('status <> ?','done');
    
    if(isset($commands['-r'])){
      $dates = explode(',',$commands['-r']);
      if(count($dates) == 2){
        $d1 = $dates[0];
        $d2 = $dates[1];
        
        $query->andWhere('(date_created BETWEEN ? AND ?', array($d1,$d2));
        $query->orWhere('date_modified BETWEEN ? AND ?)', array($d1,$d2));
      }
    }
    
    if(isset($commands['-o']))
      $query->orderBy($commands['-o']);
    else
      $query->orderBy($this->default_order_string()
              .', group_name, date_created DESC');
    
    if(count($commands) == 0)
      $query->orWhere('is_pinned = 1');
    else if(isset($commands['-p']))
      $query->orWhere('is_pinned = ?',$commands['-p']);
    
    return $query->execute();
  }

  /**
   * @param array $options
   * @return Doctrine_Collection
   */
  public function terminal_list_macro($macro){
    $query = Doctrine_Query::create()
            ->from('TblTaskLines');

    switch($macro){
      case "week":
        $query->where('(date_created BETWEEN :start AND :end'
                . ' OR date_modified BETWEEN :start AND :end'
                . ' OR date_completed BETWEEN :start AND :end)'
                , array(
            'start' => date('Y-m-d H:i:s', strtotime('-9 days')),
            'end' => date('Y-m-d H:i:s')
        ));
        break;
      case "today":
        $query->where('(date_created BETWEEN :start AND :end'
                . ' OR date_modified BETWEEN :start AND :end'
                . ' OR date_completed BETWEEN :start AND :end)'
                , array(
            'start' => date('Y-m-d H:i:s', strtotime('-2 days')),
            'end' => date('Y-m-d H:i:s')
        ));
        break;
    }

    $query->orderBy($this->default_order_string()
            .',group_name,date_created DESC');

    return $query->execute();
  }

  /**
   * @param array $options
   * @return Doctrine_Collection
   */
  public function terminal_list_macro_last($limit){
    $ids_q = 'SELECT id
FROM tbl_task_lines
WHERE id > (SELECT MAX(id)-100 FROM tbl_task_lines)
ORDER BY (CASE WHEN `date_modified` IS NULL THEN `date_created` ELSE `date_modified` END) DESC
LIMIT '.$limit.';';

    $ids_result = Doctrine_Manager::connection()->execute($ids_q)
            ->fetchAll();


    $ids = array();
    foreach($ids_result as $id){
      $ids[] = $id['id'];
    }

    $ids = implode(',', $ids);

    $query = Doctrine_Query::create()
            ->from('TblTaskLines')
            ->where('id IN ('.$ids.')')
            ->orderBy('FIELD(id, '.$ids.')', 'ASC');

    return $query->execute();
  }
  
  public function terminal_edit(TblTaskLines $task, $commands){
    $summary = array();
    $summary['task'] = $task->hash_key;
  
    if(isset($commands['-s'])){
      $summary['status'] = '"'.$task->status.'" -> "'.$commands['-s'].'"';
      $task->status = $commands['-s'];
    }
    
    if(isset($commands['-d'])){
      $summary['description'] = '"'.$task->description.'" -> "'.$commands['-d'].'"';
      $task->description = $commands['-d'];
    }

    if(isset($commands['-a'])){
      $summary['description'] = '"'.$task->description.'" -> "'.$task->description . " | " . $commands['-a'].'"';
      $task->description .= " | " . $commands['-a'];
    }
    
    if(isset($commands['-g'])){
      $summary['group'] = '"'.$task->group_name.'" -> "'.$commands['-g'].'"';
      $task->group_name = $commands['-g'];
    }
    
    if(isset($commands['-p'])){
      $summary['pinned'] = '"'.$task->is_pinned.'" -> "'.$commands['-p'].'"';
      $task->is_pinned = $commands['-p'];
    }
    
    $task->save();
  
    return $summary;
  }
  
  public function terminal_touch(TblTaskLines $task){
    $touch_ts = date("Y-m-d H:i:s");
    
    $summary = array();
    $summary['task'] = $task->hash_key;
    $summary['timestamp'] = $touch_ts;
    
    $task->date_modified = $touch_ts;
    $task->save();
    
    return $summary;
  }
}